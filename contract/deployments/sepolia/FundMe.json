{
  "address": "0xf576AF07EfFf706102756E5A443384468267E212",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa69eeb2df05832d81bbceb7908b8ac6c9efde7e529e4c6057e0ba448eb370282",
  "receipt": {
    "to": null,
    "from": "0xcC0C0c45109107e0820a6c24bEf65C0a7822C23F",
    "contractAddress": "0xf576AF07EfFf706102756E5A443384468267E212",
    "transactionIndex": 49,
    "gasUsed": "1024393",
    "logsBloom": "0x
    "blockHash": "0xbd7d21a89c7f8b31b089a24660387edc948f482cbfcb3a451f01c38af16a486e",
    "transactionHash": "0xa69eeb2df05832d81bbceb7908b8ac6c9efde7e529e4c6057e0ba448eb370282",
    "logs": [],
    "blockNumber": 4491220,
    "cumulativeGasUsed": "20150874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "245dfd646c30aa546c764acccddca414",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Dhruv Kapri\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.0;\\n\\n// Imports\\nimport {PriceConverter, AggregatorV3Interface} from \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/** @title A contract for crowd funding\\n *  @author Dhruv Kapri\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    // Type declaration\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events, Modifiers\\n    modifier onlyOwnwer() {\\n        // require(msg.sender == i_owner, \\\"Sender is now owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Funtions\\n\\n    // constructor\\n    // receive\\n    // fallback\\n    // external\\n    // public\\n    // internal\\n    // private\\n    // view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // What happens if someone send some ETH to this contract without calling the function fund()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        // Want to set a minimum send limit in USD\\n        // 1. How do we send ETH to contract\\n        // require(msg.value > 1e18, \\\"Didn't pay enough\\\"); // 1e18 = 10^18; 1 ETH = 1e9 gwei = 1e18wei\\n        require(\\n            msg.value.conversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwnwer {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset the s_funders array\\n        s_funders = new address[](0);\\n\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwnwer {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset the s_funders array\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // View Pure\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x0133eb7c28c4fa6d860310ea62c180616a1eb599e22f18efde0d9101aa24fb4d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // ABI\\n        // Address\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH in USD\\n        // 3000.00000000\\n        return uint256(answer * 1e10);\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function conversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // 3000_000000000000000000 = ETH /USD\\n        // 1_000000000000000000 ETH\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x4760335c53345c1a6e98a42bff44f367dc8c2d94502382a68de7e2e21670de74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012b8380380620012b88339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61112b6200018d60003960008181610325015281816104b801528181610594015281816105e401526107da015261112b6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ad9565b6102da565b6040516100cc9190610ccf565b60405180910390f35b6100dd610323565b005b3480156100eb57600080fd5b506100f4610583565b6040516101019190610ccf565b60405180910390f35b34801561011657600080fd5b5061011f610590565b60405161012c9190610c59565b60405180910390f35b34801561014157600080fd5b5061014a6105b8565b6040516101579190610c74565b60405180910390f35b6101686101b1565b005b6101726105e2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610b06565b6108a6565b6040516101a89190610c59565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ed90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610caf565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104535760008082815481106103cd576103cc610fe1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044b90610f3a565b9150506103ab565b50600067ffffffffffffffff81111561046f5761046e611010565b5b60405190808252806020026020018201604052801561049d5781602001602082028036833780820191505090505b50600090805190602001906104b39291906109c9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104fa90610c44565b60006040518083038185875af1925050503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b5050905080610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610c8f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610667576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106ea57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a0575b5050505050905060005b815181101561077557600082828151811061071257610711610fe1565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076d90610f3a565b9150506106f4565b50600067ffffffffffffffff81111561079157610790611010565b5b6040519080825280602002602001820160405280156107bf5781602001602082028036833780820191505090505b50600090805190602001906107d59291906109c9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081c90610c44565b60006040518083038185875af1925050503d8060008114610859576040519150601f19603f3d011682016040523d82523d6000602084013e61085e565b606091505b50509050806108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990610c8f565b60405180910390fd5b5050565b60008082815481106108bb576108ba610fe1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108f983610929565b90506000670de0b6b3a764000082866109129190610e4e565b61091c9190610d06565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097257600080fd5b505afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190610b33565b5050509150506402540be400816109c19190610d37565b915050919050565b828054828255906000526020600020908101928215610a42579160200282015b82811115610a415782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e9565b5b509050610a4f9190610a53565b5090565b5b80821115610a6c576000816000905550600101610a54565b5090565b600081359050610a7f81611099565b92915050565b600081519050610a94816110b0565b92915050565b600081359050610aa9816110c7565b92915050565b600081519050610abe816110c7565b92915050565b600081519050610ad3816110de565b92915050565b600060208284031215610aef57610aee61103f565b5b6000610afd84828501610a70565b91505092915050565b600060208284031215610b1c57610b1b61103f565b5b6000610b2a84828501610a9a565b91505092915050565b600080600080600060a08688031215610b4f57610b4e61103f565b5b6000610b5d88828901610ac4565b9550506020610b6e88828901610a85565b9450506040610b7f88828901610aaf565b9350506060610b9088828901610aaf565b9250506080610ba188828901610ac4565b9150509295509295909350565b610bb781610ea8565b82525050565b610bc681610f04565b82525050565b6000610bd9600b83610cf5565b9150610be482611044565b602082019050919050565b6000610bfc601b83610cf5565b9150610c078261106d565b602082019050919050565b6000610c1f600083610cea565b9150610c2a82611096565b600082019050919050565b610c3e81610ee4565b82525050565b6000610c4f82610c12565b9150819050919050565b6000602082019050610c6e6000830184610bae565b92915050565b6000602082019050610c896000830184610bbd565b92915050565b60006020820190508181036000830152610ca881610bcc565b9050919050565b60006020820190508181036000830152610cc881610bef565b9050919050565b6000602082019050610ce46000830184610c35565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d1182610ee4565b9150610d1c83610ee4565b925082610d2c57610d2b610fb2565b5b828204905092915050565b6000610d4282610eba565b9150610d4d83610eba565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8c57610d8b610f83565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc957610dc8610f83565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0657610e05610f83565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4357610e42610f83565b5b828202905092915050565b6000610e5982610ee4565b9150610e6483610ee4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9d57610e9c610f83565b5b828202905092915050565b6000610eb382610ec4565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f0f82610f16565b9050919050565b6000610f2182610f28565b9050919050565b6000610f3382610ec4565b9050919050565b6000610f4582610ee4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f7857610f77610f83565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110a281610ea8565b81146110ad57600080fd5b50565b6110b981610eba565b81146110c457600080fd5b50565b6110d081610ee4565b81146110db57600080fd5b50565b6110e781610eee565b81146110f257600080fd5b5056fea2646970667358221220ac58d8f2279867a4eee137c888ee5201edf91ebbcbd6baee216a26b4b3d4647c64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ad9565b6102da565b6040516100cc9190610ccf565b60405180910390f35b6100dd610323565b005b3480156100eb57600080fd5b506100f4610583565b6040516101019190610ccf565b60405180910390f35b34801561011657600080fd5b5061011f610590565b60405161012c9190610c59565b60405180910390f35b34801561014157600080fd5b5061014a6105b8565b6040516101579190610c74565b60405180910390f35b6101686101b1565b005b6101726105e2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610b06565b6108a6565b6040516101a89190610c59565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ed90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610caf565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104535760008082815481106103cd576103cc610fe1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044b90610f3a565b9150506103ab565b50600067ffffffffffffffff81111561046f5761046e611010565b5b60405190808252806020026020018201604052801561049d5781602001602082028036833780820191505090505b50600090805190602001906104b39291906109c9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104fa90610c44565b60006040518083038185875af1925050503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b5050905080610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610c8f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610667576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106ea57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a0575b5050505050905060005b815181101561077557600082828151811061071257610711610fe1565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076d90610f3a565b9150506106f4565b50600067ffffffffffffffff81111561079157610790611010565b5b6040519080825280602002602001820160405280156107bf5781602001602082028036833780820191505090505b50600090805190602001906107d59291906109c9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081c90610c44565b60006040518083038185875af1925050503d8060008114610859576040519150601f19603f3d011682016040523d82523d6000602084013e61085e565b606091505b50509050806108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990610c8f565b60405180910390fd5b5050565b60008082815481106108bb576108ba610fe1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108f983610929565b90506000670de0b6b3a764000082866109129190610e4e565b61091c9190610d06565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097257600080fd5b505afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190610b33565b5050509150506402540be400816109c19190610d37565b915050919050565b828054828255906000526020600020908101928215610a42579160200282015b82811115610a415782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e9565b5b509050610a4f9190610a53565b5090565b5b80821115610a6c576000816000905550600101610a54565b5090565b600081359050610a7f81611099565b92915050565b600081519050610a94816110b0565b92915050565b600081359050610aa9816110c7565b92915050565b600081519050610abe816110c7565b92915050565b600081519050610ad3816110de565b92915050565b600060208284031215610aef57610aee61103f565b5b6000610afd84828501610a70565b91505092915050565b600060208284031215610b1c57610b1b61103f565b5b6000610b2a84828501610a9a565b91505092915050565b600080600080600060a08688031215610b4f57610b4e61103f565b5b6000610b5d88828901610ac4565b9550506020610b6e88828901610a85565b9450506040610b7f88828901610aaf565b9350506060610b9088828901610aaf565b9250506080610ba188828901610ac4565b9150509295509295909350565b610bb781610ea8565b82525050565b610bc681610f04565b82525050565b6000610bd9600b83610cf5565b9150610be482611044565b602082019050919050565b6000610bfc601b83610cf5565b9150610c078261106d565b602082019050919050565b6000610c1f600083610cea565b9150610c2a82611096565b600082019050919050565b610c3e81610ee4565b82525050565b6000610c4f82610c12565b9150819050919050565b6000602082019050610c6e6000830184610bae565b92915050565b6000602082019050610c896000830184610bbd565b92915050565b60006020820190508181036000830152610ca881610bcc565b9050919050565b60006020820190508181036000830152610cc881610bef565b9050919050565b6000602082019050610ce46000830184610c35565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d1182610ee4565b9150610d1c83610ee4565b925082610d2c57610d2b610fb2565b5b828204905092915050565b6000610d4282610eba565b9150610d4d83610eba565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8c57610d8b610f83565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc957610dc8610f83565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0657610e05610f83565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4357610e42610f83565b5b828202905092915050565b6000610e5982610ee4565b9150610e6483610ee4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9d57610e9c610f83565b5b828202905092915050565b6000610eb382610ec4565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f0f82610f16565b9050919050565b6000610f2182610f28565b9050919050565b6000610f3382610ec4565b9050919050565b6000610f4582610ee4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f7857610f77610f83565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110a281610ea8565b81146110ad57600080fd5b50565b6110b981610eba565b81146110c457600080fd5b50565b6110d081610ee4565b81146110db57600080fd5b50565b6110e781610eee565b81146110f257600080fd5b5056fea2646970667358221220ac58d8f2279867a4eee137c888ee5201edf91ebbcbd6baee216a26b4b3d4647c64736f6c63430008070033",
  "devdoc": {
    "author": "Dhruv Kapri",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}